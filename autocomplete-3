import React, { useState, useRef } from "react";
import TextField from "@mui/material/TextField";
import Paper from "@mui/material/Paper";
import List from "@mui/material/List";
import ListItem from "@mui/material/ListItem";
import ListItemButton from "@mui/material/ListItemButton";

const suggestions = [
  { label: "John Doe", value: "john_doe" },
  { label: "Jane Smith", value: "jane_smith" },
  { label: "Bob Johnson", value: "bob_johnson" },
];

const AutocompleteTextField = () => {
  const [inputValue, setInputValue] = useState("");
  const [filteredSuggestions, setFilteredSuggestions] = useState([]);
  const [menuVisible, setMenuVisible] = useState(false);
  const [menuPosition, setMenuPosition] = useState({ top: 0, left: 0 });
  const [selectedIndex, setSelectedIndex] = useState(-1);
  const textFieldRef = useRef(null);

  //@ts-ignore
  const handleChange = (event) => {
    const value = event.target.value;
    setInputValue(value);

    const cursorPosition = event.target.selectionStart;
    const triggerPosition = value.lastIndexOf("@", cursorPosition - 1);

    if (triggerPosition !== -1 && triggerPosition < cursorPosition) {
      const query = value.slice(triggerPosition + 1, cursorPosition);
      if (query) {
        const filtered = suggestions.filter((s) =>
          s.label.toLowerCase().includes(query.toLowerCase())
        );
        //@ts-ignore
        setFilteredSuggestions(filtered);
        setMenuVisible(true);

        // Calculate menu position
        calculateMenuPosition(triggerPosition, cursorPosition);
      } else {
        setMenuVisible(false);
      }
    } else {
      setMenuVisible(false);
    }
  };

  //@ts-ignore
  const calculateMenuPosition = (triggerPosition, cursorPosition) => {
    if (!textFieldRef.current) return;

    // Create a temporary span to measure text width up to the cursor
    const textBeforeCursor = inputValue.slice(0, cursorPosition);
    const span = document.createElement("span");
    span.style.visibility = "hidden";
    span.style.position = "absolute";
    span.style.whiteSpace = "pre";
    span.style.font = window.getComputedStyle(textFieldRef.current).font;
    span.textContent = textBeforeCursor;

    document.body.appendChild(span);
    const { width } = span.getBoundingClientRect();
    document.body.removeChild(span);

    //@ts-ignore
    const textFieldRect = textFieldRef.current.getBoundingClientRect();
    setMenuPosition({
        //@ts-ignore
      top: textFieldRect.top + textFieldRef.current.offsetHeight,
      left: textFieldRect.left + width + 10, // Adjust for padding/margin
    });
  };

  //@ts-ignore
  const handleSelect = (suggestion) => {
    const cursorPosition = inputValue.lastIndexOf("@");
    const beforeTrigger = inputValue.slice(0, cursorPosition);
    const afterTrigger = inputValue.slice(cursorPosition + 1);

    const newValue = `${beforeTrigger}@${suggestion.value} ${afterTrigger}`;
    setInputValue(newValue);
    setMenuVisible(false);
    setSelectedIndex(-1);
  };

  //@ts-ignore
  const handleKeyDown = (event) => {
    if (!menuVisible) return;

    if (event.key === "ArrowDown") {
      setSelectedIndex((prevIndex) => (prevIndex + 1) % filteredSuggestions.length);
    } else if (event.key === "ArrowUp") {
      setSelectedIndex((prevIndex) =>
        prevIndex === 0 ? filteredSuggestions.length - 1 : prevIndex - 1
      );
    } else if (event.key === "Enter" && selectedIndex >= 0) {
      handleSelect(filteredSuggestions[selectedIndex]);
    } else if (event.key === "Escape") {
      setMenuVisible(false);
    }
  };

  return (
    <div style={{ position: "relative", width: "300px" }}>
      <TextField
        ref={textFieldRef}
        fullWidth
        variant="outlined"
        value={inputValue}
        onChange={handleChange}
        onKeyDown={handleKeyDown}
        placeholder="Type @ to mention a user"
        multiline
      />
      {menuVisible && filteredSuggestions.length > 0 && (
        <Paper
          style={{
            position: "absolute",
            top: `${menuPosition.top}px`,
            left: `${menuPosition.left}px`,
            zIndex: 1000,
          }}
        >
          <List>
            {filteredSuggestions.map((suggestion, index) => (
                //@ts-ignore
              <ListItem
              //@ts-ignore
                key={suggestion.value}
                disablePadding
                selected={index === selectedIndex}
              >
                <ListItemButton onClick={() => handleSelect(suggestion)}>
                {/* @ts-ignore */}
                  {suggestion.label}
                </ListItemButton>
              </ListItem>
            ))}
          </List>
        </Paper>
      )}
    </div>
  );
};

export default AutocompleteTextField;
